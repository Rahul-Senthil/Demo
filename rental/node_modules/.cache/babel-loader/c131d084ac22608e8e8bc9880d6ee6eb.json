{"ast":null,"code":"import Joi from \"joi\";\nimport { useMemo, useState } from \"react\";\nexport const useValidator = _ref => {\n  let {\n    initialData,\n    schema,\n    explicitCheck = {},\n    validationOptions = {}\n  } = _ref;\n  const [$data, set$data] = useState(() => Object.assign({}, initialData));\n  const [$dirty, set$dirty] = useState(false);\n  const [$explict_fields, set$explict_fields] = useState(() => Object.assign({}, explicitCheck));\n\n  const set$explict_field = (field, value) => {\n    set$explict_fields(old => ({ ...old,\n      [field]: value\n    }));\n  };\n\n  const $data_state = useMemo(() => {\n    const states = {};\n\n    for (const field in $data) {\n      let fieldState = {}; // Dirty state check\n      // Only global $dirty when explicitly suppressed\n\n      if (field in $explict_fields && !$explict_fields[field]) {\n        fieldState[\"$dirty\"] = $dirty;\n      } // Dirty state check\n      // both global $dirty & value change\n      else {\n        const originalValue = initialData[field];\n        const currentValue = $data[field];\n        const isMatch = Joi.any().valid(originalValue).validate(currentValue).error ? false : true;\n        fieldState[\"$dirty\"] = $dirty || !isMatch;\n      }\n\n      states[field] = fieldState;\n    }\n\n    return states;\n  }, [$data, $dirty, $explict_fields, initialData, Joi]);\n  const $source_errors = useMemo(() => {\n    const results = {};\n    const fields = Array.from(schema._ids._byKey.keys());\n    fields.map(field => {\n      const messages = [];\n      const errors = schema.extract(field).validate($data[field], validationOptions).error;\n\n      if (errors?.details) {\n        errors.details.map(err => {\n          messages.push({\n            $property: field,\n            $message: err.message\n          });\n        });\n      }\n\n      results[field] = messages;\n    });\n    return results;\n  }, [$data, schema]);\n  const $errors = useMemo(() => {\n    const results = {};\n\n    for (const field in $source_errors) {\n      if ($data_state[field].$dirty) {\n        results[field] = $source_errors[field];\n      } else {\n        results[field] = [];\n      }\n    }\n\n    return results;\n  }, [$source_errors, $data_state]);\n  const $all_errors = useMemo(() => {\n    const errors = [];\n\n    for (const field in $errors) {\n      $errors[field].map(error => {\n        errors.push(error);\n      });\n    }\n\n    return errors;\n  }, [$errors]);\n  const $all_source_errors = useMemo(() => {\n    const errors = [];\n\n    for (const field in $source_errors) {\n      $source_errors[field].map(error => {\n        errors.push(error);\n      });\n    }\n\n    return errors;\n  }, [$source_errors]);\n  const $invalid = useMemo(() => {\n    return $dirty && $all_errors.length !== 0;\n  }, [$dirty, $all_errors]);\n  const $auto_invalid = useMemo(() => $all_source_errors.length !== 0, [$all_source_errors]);\n  const $validation_success = useMemo(() => $dirty && !$invalid, [$dirty, $invalid]);\n  const state = useMemo(() => ({\n    $data,\n    $dirty,\n    $explict_fields,\n    $data_state,\n    $source_errors,\n    $errors,\n    $all_errors,\n    $all_source_errors,\n    $invalid,\n    $auto_invalid,\n    $validation_success\n  }), [$data, $dirty, $explict_fields, $data_state, $source_errors, $errors, $all_errors, $all_source_errors, $invalid, $auto_invalid, $validation_success]);\n\n  const validate = () => {\n    set$dirty(true);\n  };\n\n  return {\n    state,\n    setData: set$data,\n    setExplicitField: set$explict_field,\n    validate\n  };\n};\nexport default useValidator;","map":{"version":3,"sources":["D:/React Projects/rental-app/rental/node_modules/react-joi/index.js"],"names":["Joi","useMemo","useState","useValidator","initialData","schema","explicitCheck","validationOptions","$data","set$data","Object","assign","$dirty","set$dirty","$explict_fields","set$explict_fields","set$explict_field","field","value","old","$data_state","states","fieldState","originalValue","currentValue","isMatch","any","valid","validate","error","$source_errors","results","fields","Array","from","_ids","_byKey","keys","map","messages","errors","extract","details","err","push","$property","$message","message","$errors","$all_errors","$all_source_errors","$invalid","length","$auto_invalid","$validation_success","state","setData","setExplicitField"],"mappings":"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","sourcesContent":["import Joi from \"joi\"\n\nimport { useMemo, useState } from \"react\"\n\nexport const useValidator = ({\n    initialData,\n    schema,\n    explicitCheck = {},\n    validationOptions = {},\n}) => {\n    const [$data, set$data] = useState(() => Object.assign({}, initialData))\n\n    const [$dirty, set$dirty] = useState(false)\n\n    const [$explict_fields, set$explict_fields] = useState(() =>\n        Object.assign({}, explicitCheck)\n    )\n\n    const set$explict_field = (field, value) => {\n        set$explict_fields((old) => ({ ...old, [field]: value }))\n    }\n\n    const $data_state = useMemo(() => {\n        const states = {}\n\n        for (const field in $data) {\n            let fieldState = {}\n\n            // Dirty state check\n            // Only global $dirty when explicitly suppressed\n            if (field in $explict_fields && !$explict_fields[field]) {\n                fieldState[\"$dirty\"] = $dirty\n            }\n            // Dirty state check\n            // both global $dirty & value change\n            else {\n                const originalValue = initialData[field]\n                const currentValue = $data[field]\n\n                const isMatch = Joi.any()\n                    .valid(originalValue)\n                    .validate(currentValue).error\n                    ? false\n                    : true\n\n                fieldState[\"$dirty\"] = $dirty || !isMatch\n            }\n\n            states[field] = fieldState\n        }\n\n        return states\n    }, [$data, $dirty, $explict_fields, initialData, Joi])\n\n    const $source_errors = useMemo(() => {\n        const results = {}\n\n        const fields = Array.from(schema._ids._byKey.keys())\n        fields.map((field) => {\n            const messages = []\n            const errors = schema\n                .extract(field)\n                .validate($data[field], validationOptions).error\n\n            if (errors?.details) {\n                errors.details.map((err) => {\n                    messages.push({\n                        $property: field,\n                        $message: err.message,\n                    })\n                })\n            }\n\n            results[field] = messages\n        })\n\n        return results\n    }, [$data, schema])\n\n    const $errors = useMemo(() => {\n        const results = {}\n\n        for (const field in $source_errors) {\n            if ($data_state[field].$dirty) {\n                results[field] = $source_errors[field]\n            } else {\n                results[field] = []\n            }\n        }\n\n        return results\n    }, [$source_errors, $data_state])\n\n    const $all_errors = useMemo(() => {\n        const errors = []\n\n        for (const field in $errors) {\n            $errors[field].map((error) => {\n                errors.push(error)\n            })\n        }\n\n        return errors\n    }, [$errors])\n\n    const $all_source_errors = useMemo(() => {\n        const errors = []\n\n        for (const field in $source_errors) {\n            $source_errors[field].map((error) => {\n                errors.push(error)\n            })\n        }\n\n        return errors\n    }, [$source_errors])\n\n    const $invalid = useMemo(() => {\n        return $dirty && $all_errors.length !== 0\n    }, [$dirty, $all_errors])\n\n    const $auto_invalid = useMemo(\n        () => $all_source_errors.length !== 0,\n        [$all_source_errors]\n    )\n\n    const $validation_success = useMemo(\n        () => $dirty && !$invalid,\n        [$dirty, $invalid]\n    )\n\n    const state = useMemo(\n        () => ({\n            $data,\n            $dirty,\n            $explict_fields,\n            $data_state,\n            $source_errors,\n            $errors,\n            $all_errors,\n            $all_source_errors,\n            $invalid,\n            $auto_invalid,\n            $validation_success,\n        }),\n        [\n            $data,\n            $dirty,\n            $explict_fields,\n            $data_state,\n            $source_errors,\n            $errors,\n            $all_errors,\n            $all_source_errors,\n            $invalid,\n            $auto_invalid,\n            $validation_success,\n        ]\n    )\n\n    const validate = () => {\n        set$dirty(true)\n    }\n\n    return {\n        state,\n        setData: set$data,\n        setExplicitField: set$explict_field,\n        validate,\n    }\n}\n\nexport default useValidator\n"]},"metadata":{},"sourceType":"module"}